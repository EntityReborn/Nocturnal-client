using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using Nocturnal.Apis.Buttons.qm;
using System.IO;
using MelonLoader;
using UnityEngine;
using VRC.SDKBase;
using System.Collections;

namespace Nocturnal.Exploits
{
    class World_History
    {
        private static List<settings.WorldHistory> getworldhist()
        {
            var user = JsonConvert.DeserializeObject<List<settings.WorldHistory>>(File.ReadAllText($"{MelonUtils.GameDirectory}\\Nocturnal\\Misc\\WorldHistory.json"));
            return user;
        }

        public static IEnumerator updateworldhistory(string worldname,string worldid)
        {

            var whs = getworldhist();
            int aindex = 3;
            int aindex2 = 0;

            while (GameObject.Find("UserInterface").transform.Find("Canvas_QuickMenu(Clone)") == null)
                yield return null;

            whs[15].WorldName = whs[14].WorldName;
            whs[15].WorldId = whs[14].WorldId;

            whs[14].WorldName = whs[13].WorldName;
            whs[14].WorldId = whs[13].WorldId;

            whs[13].WorldName = whs[12].WorldName;
            whs[13].WorldId = whs[12].WorldId;

            whs[12].WorldName = whs[11].WorldName;
            whs[12].WorldId = whs[11].WorldId;

            whs[11].WorldName = whs[10].WorldName;
            whs[11].WorldId = whs[10].WorldId;

            whs[10].WorldName = whs[9].WorldName;
            whs[10].WorldId = whs[9].WorldId;

            whs[9].WorldName = whs[8].WorldName;
            whs[9].WorldId = whs[8].WorldId;

            whs[8].WorldName = whs[7].WorldName;
            whs[8].WorldId = whs[7].WorldId;

            whs[7].WorldName = whs[6].WorldName;
            whs[7].WorldId = whs[6].WorldId;

            whs[6].WorldName = whs[5].WorldName;
            whs[6].WorldId = whs[5].WorldId;

            whs[5].WorldName = whs[4].WorldName;
            whs[5].WorldId = whs[4].WorldId;

            whs[4].WorldName = whs[3].WorldName;
            whs[4].WorldId = whs[3].WorldId;

            whs[3].WorldName = whs[2].WorldName;
            whs[3].WorldId = whs[2].WorldId;

            whs[2].WorldName = whs[1].WorldName;
            whs[2].WorldId = whs[1].WorldId;

            whs[1].WorldName = whs[0].WorldName;
            whs[1].WorldId = whs[0].WorldId;

            whs[0].WorldName = worldname;
            whs[0].WorldId = worldid;


            File.WriteAllText($"{MelonUtils.GameDirectory}\\Nocturnal\\Misc\\WorldHistory.json", 
                $"[{{ \"WorldName\": \"{whs[0].WorldName}\",\"WorldId\": \"{whs[0].WorldId}\"}},{{ \"WorldName\": \"{whs[1].WorldName}\",\"WorldId\": \"{whs[1].WorldId}\"}},{{ \"WorldName\": \"{whs[2].WorldName}\",\"WorldId\": \"{whs[2].WorldId}\"}}, {{ \"WorldName\": \"{whs[3].WorldName}\",\"WorldId\": \"{whs[3].WorldId}\"}},{{ \"WorldName\": \"{whs[4].WorldName}\",\"WorldId\": \"{whs[4].WorldId}\"}}," +
                $"{{ \"WorldName\": \"{whs[5].WorldName}\",\"WorldId\": \"{whs[5].WorldId}\"}},{{ \"WorldName\": \"{whs[6].WorldName}\",\"WorldId\": \"{whs[6].WorldId}\"}},{{ \"WorldName\": \"{whs[7].WorldName}\",\"WorldId\": \"{whs[7].WorldId}\"}},{{ \"WorldName\": \"{whs[8].WorldName}\",\"WorldId\": \"{whs[8].WorldId}\"}},{{ \"WorldName\": \"{whs[9].WorldName}\",\"WorldId\": \"{whs[9].WorldId}\"}},{{ \"WorldName\": \"{whs[10].WorldName}\",\"WorldId\": \"{whs[10].WorldId}\"}}," +
                $"{{ \"WorldName\": \"{whs[11].WorldName}\",\"WorldId\": \"{whs[11].WorldId}\"}},{{ \"WorldName\": \"{whs[12].WorldName}\",\"WorldId\": \"{whs[12].WorldId}\"}},{{ \"WorldName\": \"{whs[13].WorldName}\",\"WorldId\": \"{whs[13].WorldId}\"}},{{ \"WorldName\": \"{whs[14].WorldName}\",\"WorldId\": \"{whs[14].WorldId}\"}},{{ \"WorldName\": \"{whs[15].WorldName}\",\"WorldId\": \"{whs[15].WorldId}\"}}]"
                );
            GameObject abc = new GameObject();
            foreach (var btn in GameObject.Find("/UserInterface").transform.Find("Canvas_QuickMenu(Clone)/Container/Window/QMParent/Menu_DevTools/Submenu_World History/Masked/Scrollrect(Clone)/Viewport/VerticalLayoutGroup").gameObject.GetComponentsInChildren<UnityEngine.RectTransform>(true))
            {
                try
                {
                    if (btn.gameObject.name != "VerticalLayoutGroup" && btn.gameObject.name != "Buttons")
                    GameObject.Destroy(btn.gameObject);

                }
                catch
                {

                }
                yield return null;
            }

            var whs2 = getworldhist();

            foreach (var Object in whs2)
            {
                aindex += 1;
                if (aindex == 4)
                {

                    aindex2 += 1;
                    abc = Apis.Buttons.qm.Foldout.foldout($"Row {aindex2}", Main.Loaders.Loadqm.worldhistory);
                    Button.button(Object.WorldName, abc, () => {
                        if (!Networking.GoToRoom(Object.WorldId))
                        {
                            string[] array = System.Windows.Forms.Clipboard.GetText().Split(':');
                            new PortalInternal().Method_Private_Void_String_String_PDM_0(array[0], array[1]);
                        }
                    });
                    aindex = 0; 

                }
                else
                {

                    Button.button(Object.WorldName, abc, () => {
                        if (!Networking.GoToRoom(Object.WorldId))
                        {
                            string[] array = System.Windows.Forms.Clipboard.GetText().Split(':');
                            new PortalInternal().Method_Private_Void_String_String_PDM_0(array[0], array[1]);
                        }
                    });

                }


                yield return null;
            }
            yield return null;

        }

    }
}

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.UI;
using VRC.SDK3.Components;
using VRC.SDKBase;
using Nocturnal.Wrappers;

namespace Nocturnal.Exploits
{
    class items
    {
        public static bool rotates = false;
        public static bool Respawnloopopt = false;
        public static bool ownererp = false;

        public static VRC.SDKBase.VRC_Pickup[] array;

        public static IEnumerator respawnloop()
        {
            for (; ; )
            {
                if (!Respawnloopopt)
                    yield break;

                for (var i = 0; i < array.Length; i++)
                {
                    if (Networking.GetOwner(array[i].gameObject) != Networking.LocalPlayer)
                        Networking.SetOwner(Networking.LocalPlayer, array[i].gameObject);
                    array[i].transform.localPosition = new Vector3(-999f, -999f, -999f);
                    yield return null;
                }
                yield return new WaitForSeconds(0.01f);
            }
        }

        public static IEnumerator ownerloop()
        {
            for (; ; )
            {
                if (!ownererp)
                    yield break;

                for (var i = 0; i < array.Length; i++)
                {
                    if (Networking.GetOwner(array[i].gameObject) != Networking.LocalPlayer)
                        Networking.SetOwner(Networking.LocalPlayer, array[i].gameObject);
                    yield return null;
                }
                yield return new WaitForSeconds(0.01f);
            }
        }

        public static IEnumerator pickupinteract()
        {
            for (; ; )
            {
                if (!settings.nconfig.PickableItems)
                    yield break;

                if (Wrappers.Extentions.IsInWorld() && Networking.LocalPlayer != null && settings.nconfig.PickableItems)
                {
                    foreach (var item in items.array)
                    {
                        item.pickupable = true;
                        yield return null;
                    }
                }
                yield return new WaitForSeconds(3f);
            }
        }
        public static void bringpickups(VRC.Player player)
        {
            for (int i = 0; i < array.Length; i++)
            {

                if (array[i].gameObject)
                {

                    Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, array[i].gameObject);
                    Transform transform = array[i].transform;
                    transform.transform.position = player.transform.position + new Vector3(0f, 0.1f, 0f);
                }
            }
        }


        public static void respawnpickups()
        {
            for (var i = 0; i < array.Length; i++)
            {
                if (Networking.GetOwner(array[i].gameObject) != Networking.LocalPlayer)
                Networking.SetOwner(Networking.LocalPlayer, array[i].gameObject);
                array[i].transform.localPosition = new Vector3(-999f, -999f, -999f); 
            }
        }

        public static void Stealfromh()
        {
            if (settings.nconfig.stealpickup)
            {
                for (int i = 0; i < array.Length; i++)
                {

                    if (array[i].gameObject)
                    {

                        array[i].DisallowTheft = false;
                    }

                }
            }

        }

        public static void infinitepickup()
        {
            if (settings.nconfig.Maxpickuprange)
            {
                for (int i = 0; i < array.Length; i++)
                {

                    if (array[i].gameObject)
                    {

                        array[i].proximity = 9999f;
                    }

                }
            }

        }



        public static bool ownertr = false;

        public static void objectowner()
        {
        
            
                for (int i = 0; i < array.Length; i++)
                {

                    if (array[i].gameObject && Networking.GetOwner(array[i].gameObject) != Networking.LocalPlayer)
                    {

                        Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, array[i].gameObject);
                    }

                }
            
          
        }


        public static bool isspamhead = false;
        public static void spamhead()
        {

                for (int i = 0; i < array.Length; i++)
                {

                    if (array[i].gameObject)
                    {
                        Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, array[i].gameObject);
                        array[i].gameObject.transform.position = Target.istargetd.GetVRCPlayer().GetAnimator().GetBoneTransform(HumanBodyBones.Head).position + new Vector3(0, 0.1f, 0);
                    }

                }
            

        }




        public static void rotateobjse()
        {

            for (int i = 0; i < array.Length; i++)
            {

                if (array[i].gameObject)
                {

                    Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, array[i].gameObject);
                    array[i].transform.transform.Rotate(1f, 1f, 1f);

                }

            }

        }














    }

}

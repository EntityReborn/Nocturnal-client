using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Nocturnal.Exploits;
using Nocturnal.Wrappers;
using UnityEngine;
using VRC.SDKBase;
using MelonLoader;

namespace Nocturnal.Exploits
{
    class Orbit
    {
        private static float Orbitv1 = 1;
        private static float Orbitv2 = 1;
        private static float Orbitv3 = 1;
        private static bool isabouttotoggle = true;
        private static bool isabouttotoggletw = true;

        private static float isnumb = 1;
        private static float isnumbt = 1;
        private static bool isgoingtoboom = false;
        public static bool isexploding = false;

        public static void fancyorbit()
        {
            
                try
                {
                    var gmj = new GameObject();
                    gmj.transform.position = Target.istargetd.transform.position + new Vector3(0f, 0.35f, 0f);
                    gmj.transform.Rotate(new Vector3(Orbitv1, Orbitv3, Orbitv1));
                    for (var i = 0; i < items.array.Length; i++)
                    {
                        Orbitv1 += Time.deltaTime / 2;

                        if (Orbitv2 <= 3 && isabouttotoggle)
                            Orbitv2 += Time.deltaTime / 40;
                        else if (Orbitv2 >= 0.1)
                        {
                            Orbitv2 -= Time.deltaTime / 30;
                            isabouttotoggle = false;
                        }
                        else
                            isabouttotoggle = true;

                        if (Orbitv3 <= 50 && isabouttotoggletw)
                            Orbitv3 += Time.deltaTime * 5;
                        else if (Orbitv2 >= 0.1f)
                        {
                            Orbitv3 -= Time.deltaTime * 3;
                            isabouttotoggletw = false;
                        }
                        else
                            isabouttotoggletw = true;



                        Extentions.TakeOwnershipIfNecessary(items.array[i].gameObject);
                        items.array[i].transform.position = gmj.transform.position + gmj.transform.forward * Orbitv2;
                        items.array[i].transform.LookAt(gmj.transform);
                        gmj.transform.Rotate(new Vector3(0, (float)(360 / items.array.Length), 0));

                    }

                    UnityEngine.Object.Destroy(gmj);
                }
                catch
                {

                }

            
        }

        public static void itemorbit1()
        {
           
                try
                {
                    var gmj = new GameObject();
                    gmj.transform.position = Target.istargetd.transform.position + new Vector3(0f, 0.35f, 0f);
                    gmj.transform.Rotate(new Vector3(0f, 30 * Time.time, 0f));
                    for (var i = 0; i < items.array.Length; i++)
                    {
                        Extentions.TakeOwnershipIfNecessary(items.array[i].gameObject);
                        items.array[i].transform.position = gmj.transform.position + gmj.transform.forward;
                        items.array[i].transform.LookAt(gmj.transform);
                        gmj.transform.Rotate(new Vector3(0, (float)(360 / items.array.Length), 0));

                    }

                    UnityEngine.Object.Destroy(gmj);
                }
                catch
                {

                }

            
        }

        public static void orbitexplode(GameObject gmj)
        {
           
            try
            {
                var gameObject = new GameObject();
                gameObject.transform.position = gmj.transform.position + new Vector3(0f, 0.35f, 0f);
                gameObject.transform.Rotate(new Vector3(isnumb * 5, 30 * Time.time + isnumbt, isnumb * 5));
                for (var i = 0; i < items.array.Length; i++)
                {
                    isnumbt += Time.deltaTime * 7;

                    if (isnumb <= 4.1 && !isgoingtoboom)
                        isnumb += Time.deltaTime / 20;
                    else if (isnumb >= 0.1f)
                    {
                        isgoingtoboom = true;
                        isnumb -= Time.deltaTime / 7;
                    }
                    else
                    {
                        isgoingtoboom = false;
                        isexploding = false;
                        isnumb = 1;
                        isnumbt = 1;
                        try
                        {
                            UnityEngine.Object.Destroy(gameObject);
                        }
                        catch
                        {

                        }
                        break;
                    }
                    Extentions.TakeOwnershipIfNecessary(items.array[i].gameObject);
                    items.array[i].transform.position = gameObject.transform.position + gameObject.transform.forward * isnumb;
                    items.array[i].transform.LookAt(gmj.transform);
                    gameObject.transform.Rotate(new Vector3(0f, (float)(360 / items.array.Length), 0f));

                }

                UnityEngine.Object.Destroy(gameObject);
            }
            catch
            {

            }


        }
    }
}

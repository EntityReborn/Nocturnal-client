using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using VRC.SDKBase;
using VRC.Udon;
using MelonLoader;
using UnityEngine.UI;
using System.Threading;
using System.Collections;
using Nocturnal.Wrappers;
using VRC;

namespace Nocturnal.Exploits
{
	class Murder
	{
		private static void sendmurdergmj(string udonevent)
		{
			GameObject.Find("/Game Logic").GetComponent<VRC.Udon.UdonBehaviour>().SendCustomNetworkEvent(0, udonevent);
		}

		private static bool flash = false;
		private static bool shoot = false;
		public static void BystanderW()
		{
			if (Extentions.MurderWorld())
			{
				sendmurdergmj("SyncVictoryB");
			}
		}

		public static void Murderw()
		{
			if (Extentions.MurderWorld())
			{

				sendmurdergmj("SyncVictoryM");

			}
		}

		public static void Killall()
		{
			if (Extentions.MurderWorld())
			{

				sendmurdergmj("KillLocalPlayer");

			}
		}

		public static void TpGr()
		{
			if (Extentions.MurderWorld())
			{
				foreach (GameObject gameObject in Resources.FindObjectsOfTypeAll<GameObject>())
				{

					if (gameObject.name.Contains("Frag"))
					{
						Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, gameObject);
						gameObject.transform.position = Extentions.LocalPlayer.GetVRCPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
					}
				}
			}
		}


		public static void Tpre()
		{
			if (Extentions.MurderWorld())
			{

				Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, GameObject.Find("/Game Logic").transform.Find("Weapons/Revolver").gameObject);
				GameObject.Find("/Game Logic").transform.Find("Weapons/Revolver").gameObject.transform.position = Extentions.LocalPlayer.GetVRCPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
			}

		}


		public static void knife()
		{
			if (Extentions.MurderWorld())
			{
				List<GameObject> Knifes = new List<GameObject>()
			{
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (0)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (1)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (2)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (3)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (4)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (5)").gameObject,

			};
				foreach (var gameObject in Knifes)
				{
					Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, gameObject);
					gameObject.transform.position = Extentions.LocalPlayer.GetVRCPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
				}
			}
		}


		public static void Luger()
		{
			if (Extentions.MurderWorld())
			{

				Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, GameObject.Find("Game Logic").transform.Find("Luger").gameObject);
				GameObject.Find("Game Logic").transform.Find("Luger").gameObject.transform.position = Extentions.LocalPlayer.GetVRCPlayer().transform.position + new Vector3(0f, 0.1f, 0f);

			}
		}

		public static void shotgun()
		{
			if (Extentions.MurderWorld())
			{



				Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, GameObject.Find("Game Logic").transform.Find("Shotgun").gameObject);
				GameObject.Find("Game Logic").transform.Find("Shotgun").gameObject.transform.position = Extentions.LocalPlayer.GetVRCPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
			}

		}

		public static void fcstart()
		{
			if (Extentions.MurderWorld())
			{
				foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
				{

					udonEvent.SendCustomNetworkEvent(0, "SyncStartGame");
				}
			}
		}

		public static void beartrap()
		{
			if (Extentions.MurderWorld())
			{
				foreach (GameObject gameObject in Resources.FindObjectsOfTypeAll<GameObject>())
				{

					if (gameObject.name.Contains("Bear Trap"))
					{
						Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, gameObject);
						gameObject.transform.position = Extentions.LocalPlayer.GetVRCPlayer().transform.position + new Vector3(0f, 0.1f, 0f);
					}
				}
			}
		}

		public static void tpof()
		{
			if (Extentions.MurderWorld())
			{
				Vector3 positions = new Vector3(5.0872f, 2.995f, -122.3246f);
				Extentions.LocalPlayer.transform.position = positions;
			}
		}

		public static void tprev()
		{
			if (Extentions.MurderWorld())
			{
				foreach (GameObject gameObject in Resources.FindObjectsOfTypeAll<GameObject>())
				{

					if (gameObject.name.Contains("Revolver"))
					{

						Extentions.LocalPlayer.transform.position = gameObject.transform.position;
					}
				}
			}
		}


		public static void blindall()
		{
			if (Extentions.MurderWorld())
			{
				foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
				{

					udonEvent.SendCustomNetworkEvent(0, "OnLocalPlayerFlashbanged");
					udonEvent.SendCustomNetworkEvent(0, "OnLocalPlayerBlinded");
				}
			}
		}

		public static void forceabort()
		{
			if (Extentions.MurderWorld())
			{


				sendmurdergmj("SyncAbort");

			}
		}

		public static void forcestart()
		{
			if (Extentions.MurderWorld())
			{
				foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
				{

					udonEvent.SendCustomNetworkEvent(0, "Btn_Start");
				}
			}
		}

		public static void findclues()
		{
			if (Extentions.MurderWorld())
			{
				foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
				{

					udonEvent.SendCustomNetworkEvent(0, "SyncCluesFinished");
					udonEvent.SendCustomNetworkEvent(0, "OnPlayerUnlockedClues");
					udonEvent.SendCustomNetworkEvent(0, "OnCollectClue");
				}
			}
		}

		public static void open()
		{
			if (Extentions.MurderWorld())
			{
				foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
				{

					udonEvent.SendCustomNetworkEvent(0, "SyncOpen");
				}
			}
		}
		public static void close()
		{
			if (Extentions.MurderWorld())
			{
				foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
				{

					udonEvent.SendCustomNetworkEvent(0, "SyncClose");
				}
			}
		}

		public static void murderevry()
		{
			if (Extentions.MurderWorld())
			{
				foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
				{

					udonEvent.SendCustomNetworkEvent(0, "SyncAssignM");
				}
			}
		}





		public static void trigger()
		{
			if (Extentions.MurderWorld())
			{
				foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
				{

					udonEvent.SendCustomNetworkEvent(0, "SyncTrigger");
				}
			}
		}

		public static void unlockminigame()
		{
			foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
			{

				udonEvent.SendCustomNetworkEvent(0, "SyncUnlockMinigameComplete");
			}

		}

		public static void murdergame()
		{

			if (Extentions.MurderWorld())
			{

				callkill();
				MelonCoroutines.Start(createare2());
				MelonCoroutines.Start(knif());

			}

		}


		public static void callkill()
		{

			sendmurdergmj("SyncAbort");

		}
		public static IEnumerator createare2()
		{
			yield return new WaitForSeconds(0.5f);
			foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
			{

				udonEvent.SendCustomNetworkEvent(0, "SyncUnlockMinigameComplete");
				udonEvent.SendCustomNetworkEvent(0, "SyncTrigger");
				udonEvent.SendCustomNetworkEvent(0, "SyncAssignM");
			}
		}

		public static IEnumerator knif()
		{
			yield return new WaitForSeconds(1f);
			List<GameObject> Knifes = new List<GameObject>()
			{
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (0)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (1)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (2)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (3)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (4)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Weapons/Knife (5)").gameObject,
			};
			foreach (var gameObject in Knifes)
			{

				if (gameObject.name.Contains("Knife"))
				{
					Networking.SetOwner(Extentions.LocalPlayer.field_Private_VRCPlayerApi_0, gameObject);
					var positions1 = new Vector3(0.5379f, 1.6527f, 116.2955f);
					gameObject.transform.position = positions1;
				}
			}
		}

		public static void shootweapon()
		{
			GameObject.Find("/Game Logic").transform.Find("Weapons/Revolver").gameObject.GetComponent<VRC.Udon.UdonBehaviour>().SendCustomNetworkEvent(0, "SyncFire");
		}




		public static IEnumerator blindloop()
		{

			flash = !flash;
			for (; ; )
			{
				if (flash == true)
				{


					foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
					{
						udonEvent.SendCustomNetworkEvent(0, "OnLocalPlayerFlashbanged");
					}
				}


				yield return new WaitForSeconds(2f);
			}
		}


		public static IEnumerator shootloop()
		{

			shoot = !shoot;
			for (; ; )
			{
				if (shoot == true)
				{


					foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
					{
						GameObject.Find("/Game Logic").transform.Find("Weapons/Revolver").gameObject.GetComponent<VRC.Udon.UdonBehaviour>().SendCustomNetworkEvent(0, "SyncFire");
					}
				}


				yield return new WaitForSeconds(0.3f);
			}
		}



		public static void realeasesnake()
		{
			GameObject.Find("/Game Logic").transform.Find("Snakes/SnakeDispenser").GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "DispenseSnake");
		}

		public static void closelights()
		{
			List<GameObject> marcel = new List<GameObject>()
			{
			GameObject.Find("Game Logic").transform.Find("Switch Boxes/Switchbox (0)").gameObject,
				GameObject.Find("Game Logic").transform.Find("Switch Boxes/Switchbox (1)").gameObject,
					GameObject.Find("Game Logic").transform.Find("Switch Boxes/Switchbox (2)").gameObject,
					GameObject.Find("Game Logic").transform.Find("Switch Boxes/Switchbox (3)").gameObject,

			};
			foreach (var gmj in marcel)
			{
				gmj.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "SwitchDown");
			}
		}

		public static void murdersetup(VRC.Player player)
		{
			if (player != Extentions.LocalPlayer)
			{
				var gameinstanciated = GameObject.Instantiate(GameObject.Find("Game Logic").transform.Find("Showdown Waypoint/waypoint quad"), player.transform);
				gameinstanciated.name = "Ismurdericon";
				gameinstanciated.position = player.transform.position + new Vector3(0, 1f, 0);
				var materials = gameinstanciated.gameObject.GetComponentInChildren<MeshRenderer>().material;
				MelonCoroutines.Start(Apis.image.loadtexture(materials.mainTexture, "http://nocturnal-client.xyz/cl/Download/Media/Murder.png"));
				gameinstanciated.transform.localScale = new Vector3(0.6f, 0.6f, 0.6f);
				gameinstanciated.gameObject.SetActive(false);
			}


		}

		public static bool Murderwallhack = false;
		public static IEnumerator getimpostor()
		{
			for (; ; )
            {
				
					var Playonscreen = GameObject.Find("/Game Logic").transform.Find("Game Canvas/Game In Progress/Spectate Screen/Spectate Enabled/Mask/Map Image/Spectate Map Players").gameObject;
					if (!Murderwallhack)
					{
						foreach (VRC.Player player1 in PlayerManager.prop_PlayerManager_0.field_Private_List_1_Player_0.ToArray())
						{
							try
							{
								player1.gameObject.transform.Find("Ismurdericon").gameObject.SetActive(false);
							}
							catch
							{

							}
						}
						yield break;
					}

					GameObject.Find("/Game Logic").transform.Find("Game Canvas/Game In Progress/Spectate Screen/Spectate Disabled/Enable Button").GetComponent<Button>().Press();
					foreach (var plcolor in Playonscreen.GetComponentsInChildren<UnityEngine.UI.Text>())
					{
						if (plcolor.color == new Color(0.5377358f, 0.1648718f, 0.1728278f, 1))
						{
							var text = plcolor.gameObject.GetComponentInChildren<UnityEngine.UI.Text>().m_Text;
							var target = false;
							string targetplayer = "NOTHING";
							if (targetplayer != text)
								target = true;
							if (target)
							{
								foreach (VRC.Player player1 in PlayerManager.prop_PlayerManager_0.field_Private_List_1_Player_0.ToArray())
								{
									if (player1.field_Private_APIUser_0.displayName == text)
									{
										try
										{
											targetplayer = player1.field_Private_APIUser_0.displayName;
											var issetact = player1.gameObject.transform.Find("Ismurdericon").gameObject;
											issetact.SetActive(true);
										}
										catch
										{

										}


									}
									else
									{

										try
										{
											player1.gameObject.transform.Find("Ismurdericon").gameObject.SetActive(false);
										}
										catch { }
									}
									yield return null;
								}
								target = false;
							}
						}
						yield return null;
					}

				}
			
		
		}

		public static bool doorscold = true;


		public static IEnumerator toggledoorcolideroff()
		{
			foreach (var doorss in Resources.FindObjectsOfTypeAll<BoxCollider>())
			{
				if (doorss.gameObject.name.Contains("Closed collision geo"))
				{
					doorss.GetComponent<BoxCollider>().enabled = !doorscold;
				}
				yield return null;
			}
			yield return null;

		}



	}

}






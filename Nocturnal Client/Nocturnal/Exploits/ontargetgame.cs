using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using Nocturnal.Exploits;
using Nocturnal.Wrappers;
using VRC.Udon.Common.Interfaces;
using VRC.SDKBase;
using VRC.Udon;
using VRC;
using UnhollowerBaseLib;

namespace Nocturnal.Exploits
{
    class ontargetgames
    {


        public static IEnumerator Murder()
        {
            if (RoomManager.field_Internal_Static_ApiWorld_0.id == Extentions.murder && Target.istargetd != null)
            {
                var getphoton = Target.istargetd.gameObject.GetComponent<VRCPlayer>()._player;

                var Nodes = GameObject.Find("Player Nodes");
                foreach (var obj in Nodes.GetComponentsInChildren<UdonBehaviour>())
                {
                    Networking.SetOwner(getphoton.field_Private_VRCPlayerApi_0, obj.gameObject);
                    obj.SendCustomNetworkEvent(NetworkEventTarget.Owner, "SyncAssignM");
                }

            }
            yield return null;

        }

        public static IEnumerator Flashb()
        {

            if (RoomManager.field_Internal_Static_ApiWorld_0.id == Extentions.murder && Target.istargetd != null)
            {
                var getphoton = Target.istargetd.gameObject.GetComponent<VRCPlayer>()._player;

                var Nodes = GameObject.Find("Player Nodes");
                foreach (var obj in Nodes.GetComponentsInChildren<UdonBehaviour>())
                {
                    Networking.SetOwner(getphoton.field_Private_VRCPlayerApi_0, obj.gameObject);
                    obj.SendCustomNetworkEvent(NetworkEventTarget.Owner, "SyncFlashbang");
                }

            }
            yield return null;

        }

        public static IEnumerator MakeImpostor()
        {
            if (Target.istargetd != null)
            {
                var getphoton = Target.istargetd.gameObject.GetComponent<VRCPlayer>()._player;

                var Nodes = GameObject.Find("Player Nodes");
                foreach (var obj in Nodes.GetComponentsInChildren<UdonBehaviour>())
                {
                    Networking.SetOwner(getphoton.field_Private_VRCPlayerApi_0, obj.gameObject);
                    obj.SendCustomNetworkEvent(NetworkEventTarget.Owner, "SyncAssignM");
                }

            }
            yield return null;

        }


        public static IEnumerator Eject()
        {

            if (Target.istargetd != null)
            {
                var getphoton = Target.istargetd.gameObject.GetComponent<VRCPlayer>()._player;

                var Nodes = GameObject.Find("Player Nodes");
                foreach (var obj in Nodes.GetComponentsInChildren<UdonBehaviour>())
                {
                    Networking.SetOwner(getphoton.field_Private_VRCPlayerApi_0, obj.gameObject);
                    obj.SendCustomNetworkEvent(NetworkEventTarget.Owner, "SyncVotedOut");
                }

            }
            yield return null;

        }
        public static IEnumerator bystander()
        {
            if (Target.istargetd != null)
            {
                var getphoton = Target.istargetd.gameObject.GetComponent<VRCPlayer>()._player;

                var Nodes = GameObject.Find("Player Nodes");
                foreach (var obj in Nodes.GetComponentsInChildren<UdonBehaviour>())
                {
                    Networking.SetOwner(getphoton.field_Private_VRCPlayerApi_0, obj.gameObject);
                    obj.SendCustomNetworkEvent(NetworkEventTarget.Owner, "SyncAssignB");
                }

            }
            yield return null;

        }

        public static IEnumerator detective()
        {
            if (RoomManager.field_Internal_Static_ApiWorld_0.id == Extentions.murder && Target.istargetd != null)
            {
                var getphoton = Target.istargetd.gameObject.GetComponent<VRCPlayer>()._player;

                var Nodes = GameObject.Find("Player Nodes");
                foreach (var obj in Nodes.GetComponentsInChildren<UdonBehaviour>())
                {
                    Networking.SetOwner(getphoton.field_Private_VRCPlayerApi_0, obj.gameObject);
                    obj.SendCustomNetworkEvent(NetworkEventTarget.Owner, "SyncAssignD");
                }

            }
            yield return null;

        }
        public static IEnumerator Kill()
        {

            if (Target.istargetd != null)
            {
                var getphoton = Target.istargetd.gameObject.GetComponent<VRCPlayer>()._player;

                var Nodes = GameObject.Find("Player Nodes");
                foreach (var obj in Nodes.GetComponentsInChildren<UdonBehaviour>())
                {
                    Networking.SetOwner(getphoton.field_Private_VRCPlayerApi_0, obj.gameObject);
                    obj.SendCustomNetworkEvent(NetworkEventTarget.Owner, "SyncKill");
                }

            }
            yield return null;


        }

        public static bool knifeshield = false;
        public static IEnumerator KnifeShieldss()
        {
            if (Target.istargetd != null)
            {
           

                List<GameObject> Knifes = new List<GameObject>()
            {
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (0)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (1)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (2)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (3)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (4)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (5)").gameObject,
            };

                for (; ; )
                {
                    if (knifeshield == true)
                    {
                        GameObject gameObject = new GameObject();
                        Transform transform = gameObject.transform;
                        transform.position = Target.istargetd.transform.position + new Vector3(0f, 0.35f, 0f);
                        gameObject.transform.Rotate(new Vector3(0f, 360f * Time.time, 0f));
                        foreach (var Knife in Knifes)
                        {
                            Extentions.TakeOwnershipIfNecessary(Knife.gameObject);
                            Knife.transform.position = gameObject.transform.position + gameObject.transform.forward;
                            Knife.transform.LookAt(Target.istargetd.transform);
                            gameObject.transform.Rotate(new Vector3(0f, (float)(360 / Knifes.Count), 0f));
                        }
                        UnityEngine.Object.Destroy(gameObject);
                        gameObject = null;
                        transform = null;
                    }

                    yield return null;
                }
            }
        }
        public static bool trapshield = false;

        public static IEnumerator trapshields()
        {
            if (RoomManager.field_Internal_Static_ApiWorld_0.id == Extentions.murder && Target.istargetd != null)
            {

                List<GameObject> Knifes = new List<GameObject>()
            {
                GameObject.Find("Game Logic").transform.Find("Weapons/Bear Trap (0)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Bear Trap (1)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Bear Trap (2)").gameObject,

            };

                for (; ; )
                {
                    if (trapshield == true)
                    {
                        GameObject gameObject = new GameObject();
                        Transform transform = gameObject.transform;
                        transform.position = Target.istargetd.transform.position + new Vector3(0f, 0.35f, 0f);
                        gameObject.transform.Rotate(new Vector3(0f, 360f * Time.time, 0f));
                        foreach (var Knife in Knifes)
                        {
                            Extentions.TakeOwnershipIfNecessary(Knife.gameObject);
                            Knife.transform.position = gameObject.transform.position + gameObject.transform.forward;
                            Knife.transform.LookAt(Target.istargetd.transform);
                            gameObject.transform.Rotate(new Vector3(0f, (float)(360 / Knifes.Count), 0f));
                        }
                        UnityEngine.Object.Destroy(gameObject);
                        gameObject = null;
                        transform = null;
                    }

                    yield return null;
                }
            }
        }





    }
}

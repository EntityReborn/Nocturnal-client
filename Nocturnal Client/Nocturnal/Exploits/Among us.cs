using MelonLoader;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.UI;
using VRC.Udon;
using System.Collections;
using Nocturnal.Wrappers;

namespace Nocturnal.Exploits
{
    class mogus
    {


        public static void LogImpostor()
        {
            {
                foreach (GameObject gameObject in Resources.FindObjectsOfTypeAll<GameObject>())
                {

                    if (gameObject.name.Contains("Player Entry") && gameObject.GetComponentInChildren<Text>().text != "PlayerName" && gameObject.GetComponent<Image>().color.r > 0f)
                    {
                        Style.Consoles.consolelogger(gameObject.GetComponentInChildren<Text>().text + " is the imposter");
                    }
                }
            }
        }

        public static void Skipvotes()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "Btn_SkipVoting");
                }
            }
        }
        public static void ForceStart()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "Btn_Start");
                }
            }
        }

        public static void ForceAbort()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncAbort");
                }
            }
        }

        public static void Killall()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "KillLocalPlayer");
                }
            }
        }
        public static void CallMeeting()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "StartMeeting");
                }
            }

        }


        public static void FinishVotes()
        {

            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncCloseVoting");
                }
            }

        }




        public static void ImpostorWin()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncVictoryM");
                }
            }
        }

        public static void CewmateWin()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncVictoryB");
                }
            }
        }

        public static void Electric()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageLights");
                }
            }
        }
        public static void Finishtasks()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "OnLocalPlayerCompletedTask");
                }
            }
        }
        public static void Oxygen()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageOxygen");
                }
            }
        }
        public static void Reactor()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageReactor");
                }
            }
        }

        public static void Coms()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageComms");
                }
            }
        }
        public static void SbDoors()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageDoorsStorage");
                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageDoorsLower");
                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageDoorsSecurity");
                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageDoorsUpper");
                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageDoorsCafeteria");
                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageDoorsMedbay");
                }
            }
        }

        public static void allsabotage()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageComms");
                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageReactor");
                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageOxygen");
                    udonEvent.SendCustomNetworkEvent(0, "SyncDoSabotageLights");

                }
            }
        }
        public static void Repall()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncRepairComms");
                    udonEvent.SendCustomNetworkEvent(0, "SyncRepairReactor");
                    udonEvent.SendCustomNetworkEvent(0, "SyncRepairOxygen");
                    udonEvent.SendCustomNetworkEvent(0, "SyncRepairLights");

                }
            }
        }
        public static void addimpostor()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncAssignM");
                }
            }
        }

        public static void btnkill()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "Btn_Kill");
                }
            }
        }

        public static void Synckill()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncKill");
                }
            }
        }


        public static void autostart()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncStartGame");
                }
            }
        }

        public static void amongsusallmurd()
        {
            General.deletportal();
            if (Extentions.Amongunsworld())
            {


                MelonCoroutines.Start(createare1());

            }

        }

        private static IEnumerator createare1()
        {
            foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
            {
                udonEvent.SendCustomNetworkEvent(0, "SyncAbort");


            }
            yield return new WaitForSeconds(4f);
            foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
            {

                udonEvent.SendCustomNetworkEvent(0, "SyncAssignM");
            }
        }

        public static void forpepudon()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncStartGame");
                    udonEvent.SendCustomNetworkEvent(0, "SyncStartGame");
                    udonEvent.SendCustomNetworkEvent(0, "SyncStartGame");
                }
            }


        }



        public static void ejecteveryone()
        {
            if (Extentions.Amongunsworld())
            {
                foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                {

                    udonEvent.SendCustomNetworkEvent(0, "SyncVotedOut");

                }
            }


        }
        public static bool ejectbool = false;
        public static IEnumerator ejectloop()
        {

            for (; ; )
            {
                if (ejectbool)
                {
                    foreach (var udonEvent in GameObject.FindObjectsOfType<UdonBehaviour>())
                    {
                        udonEvent.SendCustomNetworkEvent(0, "SyncVotedOut");
                        yield return new WaitForSeconds(2f);
                    }
                    yield return null;
                }

            }
        }









    }


}


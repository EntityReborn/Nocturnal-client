using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MelonLoader;
using Nocturnal.Exploits;
using Nocturnal.Wrappers;
using UnityEngine;
using VRC;
using VRC.Core;
namespace Nocturnal.Exploits
{
    class itemesp
    {
 
        public static IEnumerator itemsespref()
        {
          
            while(Extentions.LocalPlayer == null)
                yield return null;
            while (items.array == null)
                yield return null;


            while(true)
                {
                    

                    for (int i = 0; i < items.array.Length; i++)
                    {
                        try
                        {
                            if (items.array[i].gameObject && !(HighlightsFX.prop_HighlightsFX_0 == null))
                            {

                                if (items.array[i].GetComponent<MeshRenderer>() != null)
                                {
                                    var render = items.array[i].GetComponent<MeshRenderer>();
                                    HighlightsFX.field_Private_Static_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(render, settings.nconfig.itemesp);
                                }
                                else if (!items.array[i].GetComponent<MonoBehaviourPublicObReGaMaCaTeMaUnique>() && !items.array[i].GetComponent<UnityEngine.SphereCollider>())
                                {
                                    var render = items.array[i].GetComponentInChildren<MeshRenderer>();
                                    HighlightsFX.field_Private_Static_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(render, settings.nconfig.itemesp);
                                }

                            }
                        }
                        catch
                        {

                        }

                        yield return null;
                    }
                    if (!settings.nconfig.itemesp)
                        yield break;

                    yield return new WaitForSeconds(0.8f);
                }
            
        }
       
    }
}

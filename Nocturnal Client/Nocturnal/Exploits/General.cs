using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using VRC.Core;
using VRC.SDKBase;
using Nocturnal.settings;
using VRC;
using Nocturnal.Wrappers;
using MelonLoader;
using System.Windows.Forms;
using UnityEngine.UI;
using Nocturnal.Apis;

namespace Nocturnal.Exploits
{

    class General
    {
        internal static ApiWorldInstance currentRoom
        {
            get
            {
                return RoomManager.field_Internal_Static_ApiWorldInstance_0;
            }
        }



        public static void rejoinworld()
        {
            Networking.GoToRoom(currentRoom.id);
        }
        private static bool hideself = false;
        public static void Hideselftog()
        {
            hideself = !hideself;
         
            if (hideself)
            {
                Extentions.LocalPlayer.transform.FindChild("ForwardDirection").gameObject.SetActive(false);
                GameObject.Find("/UserInterface/MenuContent/Screens/Avatar/AvatarPreviewBase").SetActive(false);
            }
            else
            {
                Extentions.LocalPlayer.transform.FindChild("ForwardDirection").gameObject.SetActive(true);
                GameObject.Find("/UserInterface/MenuContent/Screens/Avatar/AvatarPreviewBase").SetActive(true);
            }
        }
        public static void targetworld()
        {
            Networking.GoToRoom(Clipboard.GetText());
        }

        public static void melonworld()
        {
            Style.Consoles.consolelogger($"World - {currentRoom.id}");
        }

        public static void infjump()
        {
            Vector3 velocity = Networking.LocalPlayer.GetVelocity();
            velocity.y = Networking.LocalPlayer.GetJumpImpulse();
            Networking.LocalPlayer.SetVelocity(velocity);
        }
        public static void byequest(VRC.Player player1)
        {

            if (settings.nconfig.Questhide && player1.prop_APIUser_0.last_platform != "standalonewindows" && player1 != Extentions.LocalPlayer && player1.IsFriend() == false)
            {
              //  Nocturnal.Apis.APIN.NDebuger($"Player Hided<color=#00ff00ff>{player1.field_Private_APIUser_0.displayName}</color>", true, Color.white);
                player1.gameObject.SetActive(false);
            }


        }
        public static void hidequesties()
        {
          
                foreach (VRC.Player player1 in PlayerManager.prop_PlayerManager_0.field_Private_List_1_Player_0.ToArray())
                {
                    if (player1.prop_APIUser_0.last_platform != "standalonewindows" && player1 != Extentions.LocalPlayer && player1.IsFriend() == false)
                    {
                        player1.gameObject.SetActive(!settings.nconfig.Questhide);
                    }
                }



        }
        public static IEnumerator closeportal()
        {
            for (; ; )
            {
                try
                {
                    if (patch.Patch.deletportals)
                        General.deletportal();
                }
                catch
                {

                }
                if (!patch.Patch.deletportals)
                    yield break;


                yield return new WaitForSeconds(0.2f);
            }
        }


        public static bool mcdoanald = false;
        public static void Mcdonaldmicrohpone()
        {
            //thx to nick
            if (mcdoanald)
                VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_USpeaker_0.field_Public_BitRate_0 = BitRate.BitRate_8K;
            else
                VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_USpeaker_0.field_Public_BitRate_0 = BitRate.BitRate_24K;

        }


        public static bool mics = false;
        public static void micii()
        {
            mics = !mics;
            if (mics)
            {
                USpeaker.field_Internal_Static_Single_1 = float.MaxValue;
            }
            else
            {
                USpeaker.field_Internal_Static_Single_1 = 1;

            }
            // if (mics)
            //   Buttons.Button.earapemic.GameObject.GetComponentInChildren<Image>().color = Color.red;
            //    else
            //  Buttons.Button.earapemic.GameObject.GetComponentInChildren<Image>().color = Color.blue;
        }

        public static void teleport(VRC.Player player)
        {
            Extentions.LocalPlayer.transform.position = player.transform.position + new Vector3(0, 0.25f, 0);
          //  Apis.APIN.NDebuger($"Teleported to {player.field_Private_APIUser_0.displayName}", Utilities.Utilities.ismelonlogger, Color.white);
        }


        public static void Pedestals()
        {
            foreach (VRC.SDKBase.VRC_AvatarPedestal vrc_AvatarPedestal in UnityEngine.Object.FindObjectsOfType<VRC.SDKBase.VRC_AvatarPedestal>())
            {
                Networking.SetOwner(Networking.LocalPlayer, vrc_AvatarPedestal.gameObject);
                Networking.RPC(VRC.SDKBase.RPC.Destination.All, vrc_AvatarPedestal.gameObject, "SwitchAvatar", new Il2CppSystem.Object[]
                {
                    APIUser.CurrentUser.avatarId
                });
            }
        }

        public static void deletportal()
        {
            PortalTrigger[] array = Resources.FindObjectsOfTypeAll<PortalTrigger>();
            for (int i = 0; i < array.Length; i++)
            {
                if (array[i].gameObject.activeInHierarchy && !(array[i].gameObject.GetComponentInParent<VRC.SDKBase.VRC_PortalMarker>() != null))
                {
                    UnityEngine.Object.Destroy(array[i].gameObject);
                }
            }
        }




    }
}
